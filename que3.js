/*
Question: MongoDB Aggregation Consider a MongoDB collection named sales with documents
structured as follows:
json:
{
  _id: ObjectId("..."),
  date: ISODate("2024-06-15T00:00:00Z"),
  store: "Store A",
  items: [
    {
      name: "item1",
      quantity: 5,
      price: 10.0
    },
    {
      name: "item2",
      quantity: 3,
      price: 20.0
    }
  ]
}

Your task is to write an aggregation pipeline to calculate the total revenue generated by each store
for each month, along with the average price of items sold. The result should be sorted first by store
and then by month (in ascending order).
The expected output should be something like this:
json:
[
  {
    store: "Store A",
    month: "2024-06",
    totalRevenue: 230.0,
    averagePrice: 15.0
  },
  {
    store: "Store B",
    month: "2024-06",
    totalRevenue: 150.0,
    averagePrice: 12.5
  }
]
*/


db.sales.aggregate([
  {
    $addFields: {
      month: { $dateToString: { format: "%Y-%m", date: "$date" } }
    }
  },
  {
    $unwind: "$items"
  },
  {
    $group: {
      _id: {
        store: "$store",
        month: "$month"
      },
      totalRevenue: { $sum: { $multiply: ["$items.quantity", "$items.price"] } },
      totalQuantity: { $sum: "$items.quantity" }
    }
  },
  {
    $addFields: {
      averagePrice: {
        $cond: [
          { $eq: ["$totalQuantity", 0] },
          0,
          { $divide: ["$totalRevenue", "$totalQuantity"] }
        ]
      }
    }
  },
  {
    $project: {
      _id: 0,
      store: "$_id.store",
      month: "$_id.month",
      totalRevenue: 1,
      averagePrice: { $round: ["$averagePrice", 2] }
    }
  },
  {
    $sort: {
      store: 1,
      month: 1
    }
  }
])